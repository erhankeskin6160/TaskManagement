{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { TaskItemStatus } from '../../models/task-item.model';\nlet TaskListComponent = class TaskListComponent {\n  constructor(taskService) {\n    this.taskService = taskService;\n    this.tasks = [];\n    this.filteredTasks = [];\n    this.selectedStatus = 'all';\n    this.searchTerm = '';\n    this.isLoading = false;\n    this.showModal = false;\n    this.editingTask = null;\n    this.TaskItemStatus = TaskItemStatus;\n    this.taskForm = {\n      title: '',\n      description: '',\n      dueDate: '',\n      status: TaskItemStatus.Pending\n    };\n  }\n  ngOnInit() {\n    this.loadTasks();\n  }\n  loadTasks(status) {\n    this.isLoading = true;\n    this.taskService.getTasksByStatus(status).subscribe({\n      next: data => {\n        this.tasks = data;\n        this.applyFilters();\n        this.isLoading = false;\n      },\n      error: error => {\n        console.error('Görevler yüklenirken hata:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n  applyFilters() {\n    let filtered = [...this.tasks];\n    if (this.selectedStatus !== 'all') {\n      filtered = filtered.filter(task => task.status === Number(this.selectedStatus));\n    }\n    if (this.searchTerm) {\n      const search = this.searchTerm.toLowerCase();\n      filtered = filtered.filter(task => task.title.toLowerCase().includes(search) || task.description && task.description.toLowerCase().includes(search));\n    }\n    this.filteredTasks = filtered;\n  }\n  onStatusFilterChange(event) {\n    this.selectedStatus = event.target.value;\n    this.applyFilters();\n  }\n  onSearchChange() {\n    this.applyFilters();\n  }\n  openCreateModal() {\n    this.editingTask = null;\n    this.taskForm = {\n      title: '',\n      description: '',\n      dueDate: '',\n      status: TaskItemStatus.Pending\n    };\n    this.showModal = true;\n  }\n  openEditModal(task) {\n    this.editingTask = task;\n    this.taskForm = {\n      title: task.title,\n      description: task.description || '',\n      dueDate: new Date(task.dueDate).toISOString().split('T')[0],\n      status: task.status\n    };\n    this.showModal = true;\n  }\n  closeModal() {\n    this.showModal = false;\n    this.editingTask = null;\n  }\n  saveTask() {\n    if (!this.taskForm.title || !this.taskForm.dueDate) {\n      alert('Lütfen tüm zorunlu alanları doldurun');\n      return;\n    }\n    const command = {\n      title: this.taskForm.title,\n      description: this.taskForm.description,\n      dueDate: new Date(this.taskForm.dueDate),\n      status: Number(this.taskForm.status)\n    };\n    if (this.editingTask) {\n      const updateCommand = {\n        id: this.editingTask.id,\n        title: command.title,\n        description: command.description,\n        dueDate: command.dueDate,\n        status: command.status\n      };\n      this.taskService.updateTask(this.editingTask.id, updateCommand).subscribe({\n        next: () => {\n          this.loadTasks();\n          this.closeModal();\n        },\n        error: error => console.error('Güncelleme hatası:', error)\n      });\n    } else {\n      this.taskService.createTask(command).subscribe({\n        next: () => {\n          this.loadTasks();\n          this.closeModal();\n        },\n        error: error => console.error('Oluşturma hatası:', error)\n      });\n    }\n  }\n  deleteTask(id) {\n    if (confirm('Bu görevi silmek istediğinizden emin misiniz?')) {\n      this.taskService.deleteTask(id).subscribe({\n        next: () => this.loadTasks(),\n        error: error => console.error('Silme hatası:', error)\n      });\n    }\n  }\n  updateTaskStatus(task, event) {\n    const newStatus = Number(event.target.value);\n    const command = {\n      id: task.id,\n      title: task.title,\n      description: task.description,\n      dueDate: task.dueDate,\n      status: newStatus\n    };\n    this.taskService.updateTask(task.id, command).subscribe({\n      next: () => this.loadTasks(),\n      error: error => console.error('Durum güncelleme hatası:', error)\n    });\n  }\n  getStatusText(status) {\n    switch (status) {\n      case TaskItemStatus.Pending:\n        return 'Beklemede';\n      case TaskItemStatus.InProgress:\n        return 'Devam Ediyor';\n      case TaskItemStatus.Completed:\n        return 'Tamamlandı';\n      default:\n        return '';\n    }\n  }\n  getStatusClass(status) {\n    switch (status) {\n      case TaskItemStatus.Pending:\n        return 'status-pending';\n      case TaskItemStatus.InProgress:\n        return 'status-in-progress';\n      case TaskItemStatus.Completed:\n        return 'status-completed';\n      default:\n        return '';\n    }\n  }\n  get pendingCount() {\n    return this.tasks.filter(t => t.status === TaskItemStatus.Pending).length;\n  }\n  get inProgressCount() {\n    return this.tasks.filter(t => t.status === TaskItemStatus.InProgress).length;\n  }\n  get completedCount() {\n    return this.tasks.filter(t => t.status === TaskItemStatus.Completed).length;\n  }\n};\nTaskListComponent = __decorate([Component({\n  selector: 'app-task-list',\n  templateUrls: ['./task-list.component.html'],\n  styleUrls: ['./task-list.component.css']\n})], TaskListComponent);\nexport { TaskListComponent };","map":{"version":3,"mappings":"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","names":["Component","TaskItemStatus","TaskListComponent","constructor","taskService","title","description","dueDate","status","Pending","ngOnInit","loadTasks","isLoading","getTasksByStatus","subscribe","next","data","tasks","applyFilters","error","console","filtered","selectedStatus","filter","task","Number","searchTerm","search","toLowerCase","includes","filteredTasks","onStatusFilterChange","event","target","value","onSearchChange","openCreateModal","editingTask","taskForm","showModal","openEditModal","Date","toISOString","split","closeModal","saveTask","alert","command","updateCommand","id","updateTask","createTask","deleteTask","confirm","updateTaskStatus","newStatus","getStatusText","InProgress","Completed","getStatusClass","pendingCount","t","length","inProgressCount","completedCount","selector","templateUrls","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Erhan Keskin\\Desktop\\TaskManagementSystem\\taskmanagement-frontendAngular\\src\\app\\components\\task-list\\task-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TaskService } from '../../services/task.service';\nimport { TaskItem, TaskItemStatus, CreateTaskItemCommand, UpdateTaskItemCommand } from '../../models/task-item.model';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrls:['./task-list.component.html'],\n  styleUrls: ['./task-list.component.css']\n})\nexport class TaskListComponent implements OnInit {\n  tasks: TaskItem[] = [];\n  filteredTasks: TaskItem[] = [];\n  selectedStatus: string = 'all';\n  searchTerm: string = '';\n  isLoading: boolean = false;\n  showModal: boolean = false;\n  editingTask: TaskItem | null = null;\n\n  TaskItemStatus = TaskItemStatus;\n\n  taskForm: {\n    title: string;\n    description: string;\n    dueDate: string;\n    status: TaskItemStatus;\n  } = {\n    title: '',\n    description: '',\n    dueDate: '',\n    status: TaskItemStatus.Pending\n  };\n\n  constructor(private taskService: TaskService) {}\n\n  ngOnInit(): void {\n    this.loadTasks();\n  }\n\n  loadTasks(status?: TaskItemStatus): void {\n    this.isLoading = true;\n    this.taskService.getTasksByStatus(status).subscribe({\n      next: (data) => {\n        this.tasks = data;\n        this.applyFilters();\n        this.isLoading = false;\n      },\n      error: (error) => {\n        console.error('Görevler yüklenirken hata:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n\n  applyFilters(): void {\n    let filtered = [...this.tasks];\n\n    if (this.selectedStatus !== 'all') {\n      filtered = filtered.filter(task =>\n        task.status === Number(this.selectedStatus)\n      );\n    }\n\n    if (this.searchTerm) {\n      const search = this.searchTerm.toLowerCase();\n      filtered = filtered.filter(task =>\n        task.title.toLowerCase().includes(search) ||\n        (task.description && task.description.toLowerCase().includes(search))\n      );\n    }\n\n    this.filteredTasks = filtered;\n  }\n\n  onStatusFilterChange(event: any): void {\n    this.selectedStatus = event.target.value;\n    this.applyFilters();\n  }\n\n  onSearchChange(): void {\n    this.applyFilters();\n  }\n\n  openCreateModal(): void {\n    this.editingTask = null;\n    this.taskForm = {\n      title: '',\n      description: '',\n      dueDate: '',\n      status: TaskItemStatus.Pending\n    };\n    this.showModal = true;\n  }\n\n  openEditModal(task: TaskItem): void {\n    this.editingTask = task;\n    this.taskForm = {\n      title: task.title,\n      description: task.description || '',\n      dueDate: new Date(task.dueDate).toISOString().split('T')[0],\n      status: task.status\n    };\n    this.showModal = true;\n  }\n\n  closeModal(): void {\n    this.showModal = false;\n    this.editingTask = null;\n  }\n\n  saveTask(): void {\n    if (!this.taskForm.title || !this.taskForm.dueDate) {\n      alert('Lütfen tüm zorunlu alanları doldurun');\n      return;\n    }\n\n    const command: CreateTaskItemCommand = {\n      title: this.taskForm.title,\n      description: this.taskForm.description,\n      dueDate: new Date(this.taskForm.dueDate),\n      status: Number(this.taskForm.status)\n    };\n\n    if (this.editingTask) {\n      const updateCommand: UpdateTaskItemCommand = {\n        id: this.editingTask.id,\n        title: command.title,\n        description: command.description,\n        dueDate: command.dueDate,\n        status: command.status\n      };\n      this.taskService.updateTask(this.editingTask.id, updateCommand).subscribe({\n        next: () => {\n          this.loadTasks();\n          this.closeModal();\n        },\n        error: (error) => console.error('Güncelleme hatası:', error)\n      });\n    } else {\n      this.taskService.createTask(command).subscribe({\n        next: () => {\n          this.loadTasks();\n          this.closeModal();\n        },\n        error: (error) => console.error('Oluşturma hatası:', error)\n      });\n    }\n  }\n\n  deleteTask(id: string): void {\n    if (confirm('Bu görevi silmek istediğinizden emin misiniz?')) {\n      this.taskService.deleteTask(id).subscribe({\n        next: () => this.loadTasks(),\n        error: (error) => console.error('Silme hatası:', error)\n      });\n    }\n  }\n\n  updateTaskStatus(task: TaskItem, event: any): void {\n    const newStatus = Number(event.target.value);\n    const command: UpdateTaskItemCommand = {\n      id: task.id,\n      title: task.title,\n      description: task.description,\n      dueDate: task.dueDate,\n      status: newStatus\n    };\n\n    this.taskService.updateTask(task.id, command).subscribe({\n      next: () => this.loadTasks(),\n      error: (error) => console.error('Durum güncelleme hatası:', error)\n    });\n  }\n\n  getStatusText(status: TaskItemStatus): string {\n    switch (status) {\n      case TaskItemStatus.Pending: return 'Beklemede';\n      case TaskItemStatus.InProgress: return 'Devam Ediyor';\n      case TaskItemStatus.Completed: return 'Tamamlandı';\n      default: return '';\n    }\n  }\n\n  getStatusClass(status: TaskItemStatus): string {\n    switch (status) {\n      case TaskItemStatus.Pending: return 'status-pending';\n      case TaskItemStatus.InProgress: return 'status-in-progress';\n      case TaskItemStatus.Completed: return 'status-completed';\n      default: return '';\n    }\n  }\n\n  get pendingCount(): number {\n    return this.tasks.filter(t => t.status === TaskItemStatus.Pending).length;\n  }\n\n  get inProgressCount(): number {\n    return this.tasks.filter(t => t.status === TaskItemStatus.InProgress).length;\n  }\n\n  get completedCount(): number {\n    return this.tasks.filter(t => t.status === TaskItemStatus.Completed).length;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}