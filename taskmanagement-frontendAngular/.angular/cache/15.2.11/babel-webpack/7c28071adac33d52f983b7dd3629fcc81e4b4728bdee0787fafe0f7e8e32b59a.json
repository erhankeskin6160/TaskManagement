{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/api/TaskItem`;\n  }\n  getTasksByStatus(status) {\n    let params = new HttpParams();\n    if (status !== undefined && status !== null) {\n      params = params.set('status', status.toString());\n    }\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(catchError(this.handleError));\n  }\n  getTaskById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  createTask(command) {\n    // Status number olarak gönderiliyor\n    const payload = {\n      ...command,\n      status: Number(command.status)\n    };\n    return this.http.post(this.apiUrl, payload).pipe(catchError(this.handleError));\n  }\n  updateTask(id, command) {\n    const payload = {\n      ...command,\n      status: Number(command.status)\n    };\n    return this.http.put(`${this.apiUrl}/${id}`, payload).pipe(catchError(this.handleError));\n  }\n  deleteTask(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 400 && error.error) {\n      return throwError(() => error.error);\n    }\n    return throwError(() => new Error('Sunucu Hatası. Lütfen daha sonra tekrar deneyin.'));\n  }\n  static {\n    this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAwCA,UAAU,QAAQ,sBAAsB;AAChF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,eAAe;EAEd;EAEvCC,gBAAgB,CAACC,MAAuB;IACtC,IAAIC,MAAM,GAAG,IAAIV,UAAU,EAAE;IAC7B,IAAIS,MAAM,KAAKE,SAAS,IAAIF,MAAM,KAAK,IAAI,EAAE;MAC3CC,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAACI,QAAQ,EAAE,CAAC;;IAElD,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAa,IAAI,CAACP,MAAM,EAAE;MAAEG;IAAM,CAAE,CAAC,CAACK,IAAI,CAC5Db,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEAC,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACZ,IAAI,CAACQ,GAAG,CAAW,GAAG,IAAI,CAACP,MAAM,IAAIW,EAAE,EAAE,CAAC,CAACH,IAAI,CACzDb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEAG,UAAU,CAACC,OAA8B;IACvC;IACA,MAAMC,OAAO,GAAG;MAAE,GAAGD,OAAO;MAAEX,MAAM,EAAEa,MAAM,CAACF,OAAO,CAACX,MAAM;IAAC,CAAE;IAC9D,OAAO,IAAI,CAACH,IAAI,CAACiB,IAAI,CAAW,IAAI,CAAChB,MAAM,EAAEc,OAAO,CAAC,CAACN,IAAI,CACxDb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEAQ,UAAU,CAACN,EAAU,EAAEE,OAA8B;IACnD,MAAMC,OAAO,GAAG;MAAE,GAAGD,OAAO;MAAEX,MAAM,EAAEa,MAAM,CAACF,OAAO,CAACX,MAAM;IAAC,CAAE;IAC9D,OAAO,IAAI,CAACH,IAAI,CAACmB,GAAG,CAAW,GAAG,IAAI,CAAClB,MAAM,IAAIW,EAAE,EAAE,EAAEG,OAAO,CAAC,CAACN,IAAI,CAClEb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEAU,UAAU,CAACR,EAAU;IACnB,OAAO,IAAI,CAACZ,IAAI,CAACqB,MAAM,CAAC,GAAG,IAAI,CAACpB,MAAM,IAAIW,EAAE,EAAE,CAAC,CAACH,IAAI,CAClDb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAW,CAACY,KAAwB;IAC1C,IAAIA,KAAK,CAACnB,MAAM,KAAK,GAAG,IAAImB,KAAK,CAACA,KAAK,EAAE;MACvC,OAAO3B,UAAU,CAAC,MAAM2B,KAAK,CAACA,KAAK,CAAC;;IAEtC,OAAO3B,UAAU,CAAC,MAAM,IAAI4B,KAAK,CAAC,kDAAkD,CAAC,CAAC;EACxF;;;uBA/CWzB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA0B,SAAX1B,WAAW;MAAA2B,YAFV;IAAM;EAAA","names":["HttpParams","throwError","catchError","environment","TaskService","constructor","http","apiUrl","getTasksByStatus","status","params","undefined","set","toString","get","pipe","handleError","getTaskById","id","createTask","command","payload","Number","post","updateTask","put","deleteTask","delete","error","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Erhan Keskin\\Desktop\\TaskManagementSystem\\taskmanagement-frontendAngular\\src\\app\\components\\task-list\\task-list.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { TaskItem, TaskItemStatus, CreateTaskItemCommand, UpdateTaskItemCommand } from '../models/task-item.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private apiUrl = `${environment.apiUrl}/api/TaskItem`;\n\n  constructor(private http: HttpClient) {}\n\n  getTasksByStatus(status?: TaskItemStatus): Observable<TaskItem[]> {\n    let params = new HttpParams();\n    if (status !== undefined && status !== null) {\n      params = params.set('status', status.toString());\n    }\n    return this.http.get<TaskItem[]>(this.apiUrl, { params }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  getTaskById(id: string): Observable<TaskItem> {\n    return this.http.get<TaskItem>(`${this.apiUrl}/${id}`).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  createTask(command: CreateTaskItemCommand): Observable<TaskItem> {\n    // Status number olarak gönderiliyor\n    const payload = { ...command, status: Number(command.status) };\n    return this.http.post<TaskItem>(this.apiUrl, payload).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  updateTask(id: string, command: UpdateTaskItemCommand): Observable<TaskItem> {\n    const payload = { ...command, status: Number(command.status) };\n    return this.http.put<TaskItem>(`${this.apiUrl}/${id}`, payload).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  deleteTask(id: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 400 && error.error) {\n      return throwError(() => error.error);\n    }\n    return throwError(() => new Error('Sunucu Hatası. Lütfen daha sonra tekrar deneyin.'));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}