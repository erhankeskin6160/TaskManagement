{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/api/TaskItem`;\n  }\n  getTasksByStatus(status) {\n    let params = new HttpParams();\n    if (status !== undefined && status !== null) {\n      params = params.set('status', status.toString());\n    }\n    return this.http.get(this.apiUrl, {\n      params\n    });\n  }\n  getTaskById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createTask(command) {\n    return this.http.post(this.apiUrl, command).pipe(catchError(error => {\n      if (error.status === 400 && error.error?.errors) {\n        return throwError(() => error.error.errors);\n      }\n      return throwError(() => new Error('Sunucu hatası, lütfen tekrar deneyin'));\n    }));\n  }\n  updateTask(id, command) {\n    return this.http.put(`${this.apiUrl}/${id}`, command).pipe(catchError(error => {\n      if (error.status === 400 && error.error?.errors) {\n        return throwError(() => error.error.errors);\n      }\n      return throwError(() => new Error('Sunucu hatası, lütfen tekrar deneyin'));\n    }));\n  }\n  deleteTask(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAwCA,UAAU,QAAQ,sBAAsB;AAChF,SAASC,UAAU,EAAcC,UAAU,QAAQ,MAAM;AACzD,SAASC,WAAW,QAAQ,gCAAgC;;;AAW5D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,eAAe;EAEd;EAEvCC,gBAAgB,CAACC,MAAuB;IACtC,IAAIC,MAAM,GAAG,IAAIV,UAAU,EAAE;IAC7B,IAAIS,MAAM,KAAKE,SAAS,IAAIF,MAAM,KAAK,IAAI,EAAE;MAC3CC,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAACI,QAAQ,EAAE,CAAC;;IAElD,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAa,IAAI,CAACP,MAAM,EAAE;MAAEG;IAAM,CAAE,CAAC;EAC3D;EAEAK,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAW,GAAG,IAAI,CAACP,MAAM,IAAIS,EAAE,EAAE,CAAC;EACxD;EAEAC,UAAU,CAACC,OAA8B;IACvC,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAW,IAAI,CAACZ,MAAM,EAAEW,OAAO,CAAC,CAACE,IAAI,CACxDnB,UAAU,CAAEoB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACZ,MAAM,KAAK,GAAG,IAAIY,KAAK,CAACA,KAAK,EAAEC,MAAM,EAAE;QAC/C,OAAOpB,UAAU,CAAC,MAAMmB,KAAK,CAACA,KAAK,CAACC,MAAM,CAAC;;MAE7C,OAAOpB,UAAU,CAAC,MAAM,IAAIqB,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC5E,CAAC,CAAC,CACH;EACH;EAEAC,UAAU,CAACR,EAAU,EAAEE,OAA8B;IACnD,OAAO,IAAI,CAACZ,IAAI,CAACmB,GAAG,CAAW,GAAG,IAAI,CAAClB,MAAM,IAAIS,EAAE,EAAE,EAAEE,OAAO,CAAC,CAACE,IAAI,CAClEnB,UAAU,CAAEoB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACZ,MAAM,KAAK,GAAG,IAAIY,KAAK,CAACA,KAAK,EAAEC,MAAM,EAAE;QAC/C,OAAOpB,UAAU,CAAC,MAAMmB,KAAK,CAACA,KAAK,CAACC,MAAM,CAAC;;MAE7C,OAAOpB,UAAU,CAAC,MAAM,IAAIqB,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC5E,CAAC,CAAC,CACH;EACH;EAEAG,UAAU,CAACV,EAAU;IACnB,OAAO,IAAI,CAACV,IAAI,CAACqB,MAAM,CAAC,GAAG,IAAI,CAACpB,MAAM,IAAIS,EAAE,EAAE,CAAC;EACjD;;;uBAzCWZ,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAwB,SAAXxB,WAAW;MAAAyB,YAFV;IAAM;EAAA","names":["HttpParams","catchError","throwError","environment","TaskService","constructor","http","apiUrl","getTasksByStatus","status","params","undefined","set","toString","get","getTaskById","id","createTask","command","post","pipe","error","errors","Error","updateTask","put","deleteTask","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Erhan Keskin\\Desktop\\TaskManagementSystem\\taskmanagement-frontendAngular\\src\\app\\services\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport {\n  TaskItem,\n  TaskItemStatus,\n  CreateTaskItemCommand,\n  UpdateTaskItemCommand\n} from '../models/task-item.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private apiUrl = `${environment.apiUrl}/api/TaskItem`;\n\n  constructor(private http: HttpClient) {}\n\n  getTasksByStatus(status?: TaskItemStatus): Observable<TaskItem[]> {\n    let params = new HttpParams();\n    if (status !== undefined && status !== null) {\n      params = params.set('status', status.toString());\n    }\n    return this.http.get<TaskItem[]>(this.apiUrl, { params });\n  }\n\n  getTaskById(id: string): Observable<TaskItem> {\n    return this.http.get<TaskItem>(`${this.apiUrl}/${id}`);\n  }\n\n  createTask(command: CreateTaskItemCommand): Observable<TaskItem> {\n    return this.http.post<TaskItem>(this.apiUrl, command).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 400 && error.error?.errors) {\n          return throwError(() => error.error.errors);\n        }\n        return throwError(() => new Error('Sunucu hatası, lütfen tekrar deneyin'));\n      })\n    );\n  }\n\n  updateTask(id: string, command: UpdateTaskItemCommand): Observable<TaskItem> {\n    return this.http.put<TaskItem>(`${this.apiUrl}/${id}`, command).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 400 && error.error?.errors) {\n          return throwError(() => error.error.errors);\n        }\n        return throwError(() => new Error('Sunucu hatası, lütfen tekrar deneyin'));\n      })\n    );\n  }\n\n  deleteTask(id: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}